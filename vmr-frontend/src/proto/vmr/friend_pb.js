/* eslint-disable */ /**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var vmr_common_pb = require('../vmr/common_pb.js');
goog.exportSymbol('proto.vmr.ClearUnreadMessageRequest', null, global);
goog.exportSymbol('proto.vmr.ClearUnreadMessageResponse', null, global);
goog.exportSymbol('proto.vmr.FriendInfo', null, global);
goog.exportSymbol('proto.vmr.FriendListResponse', null, global);
goog.exportSymbol('proto.vmr.FriendStatus', null, global);
goog.exportSymbol('proto.vmr.GetUserInfoRequest', null, global);
goog.exportSymbol('proto.vmr.GetUserInfoResponse', null, global);
goog.exportSymbol('proto.vmr.SetFriendStatusRequest', null, global);
goog.exportSymbol('proto.vmr.SetFriendStatusRequest.Type', null, global);
goog.exportSymbol('proto.vmr.SetFriendStatusResponse', null, global);
goog.exportSymbol('proto.vmr.UserListRequest', null, global);
goog.exportSymbol('proto.vmr.UserListResponse', null, global);
goog.exportSymbol('proto.vmr.UserResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.GetUserInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vmr.GetUserInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.GetUserInfoRequest.displayName = 'proto.vmr.GetUserInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.GetUserInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.GetUserInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.GetUserInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.GetUserInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.GetUserInfoRequest}
 */
proto.vmr.GetUserInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.GetUserInfoRequest;
  return proto.vmr.GetUserInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.GetUserInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.GetUserInfoRequest}
 */
proto.vmr.GetUserInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.GetUserInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.GetUserInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.GetUserInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.GetUserInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.GetUserInfoRequest} The clone.
 */
proto.vmr.GetUserInfoRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.GetUserInfoRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.vmr.GetUserInfoRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.vmr.GetUserInfoRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.GetUserInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vmr.GetUserInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.GetUserInfoResponse.displayName = 'proto.vmr.GetUserInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.GetUserInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.GetUserInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.GetUserInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.GetUserInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vmr_common_pb.Error.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.vmr.UserResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.GetUserInfoResponse}
 */
proto.vmr.GetUserInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.GetUserInfoResponse;
  return proto.vmr.GetUserInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.GetUserInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.GetUserInfoResponse}
 */
proto.vmr.GetUserInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vmr_common_pb.Error;
      reader.readMessage(value,vmr_common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.vmr.UserResponse;
      reader.readMessage(value,proto.vmr.UserResponse.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.GetUserInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.GetUserInfoResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.GetUserInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.GetUserInfoResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vmr_common_pb.Error.serializeBinaryToWriter
    );
  }
  f = this.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vmr.UserResponse.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.GetUserInfoResponse} The clone.
 */
proto.vmr.GetUserInfoResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.GetUserInfoResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Error error = 1;
 * @return {proto.vmr.Error}
 */
proto.vmr.GetUserInfoResponse.prototype.getError = function() {
  return /** @type{proto.vmr.Error} */ (
    jspb.Message.getWrapperField(this, vmr_common_pb.Error, 1));
};


/** @param {proto.vmr.Error|undefined} value  */
proto.vmr.GetUserInfoResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vmr.GetUserInfoResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.vmr.GetUserInfoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserResponse user = 2;
 * @return {proto.vmr.UserResponse}
 */
proto.vmr.GetUserInfoResponse.prototype.getUser = function() {
  return /** @type{proto.vmr.UserResponse} */ (
    jspb.Message.getWrapperField(this, proto.vmr.UserResponse, 2));
};


/** @param {proto.vmr.UserResponse|undefined} value  */
proto.vmr.GetUserInfoResponse.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vmr.GetUserInfoResponse.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.vmr.GetUserInfoResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.FriendListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vmr.FriendListResponse.repeatedFields_, null);
};
goog.inherits(proto.vmr.FriendListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.FriendListResponse.displayName = 'proto.vmr.FriendListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vmr.FriendListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.FriendListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.FriendListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.FriendListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.FriendListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vmr_common_pb.Error.toObject(includeInstance, f),
    friendInfoList: jspb.Message.toObjectList(msg.getFriendInfoList(),
    proto.vmr.FriendInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.FriendListResponse}
 */
proto.vmr.FriendListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.FriendListResponse;
  return proto.vmr.FriendListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.FriendListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.FriendListResponse}
 */
proto.vmr.FriendListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vmr_common_pb.Error;
      reader.readMessage(value,vmr_common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.vmr.FriendInfo;
      reader.readMessage(value,proto.vmr.FriendInfo.deserializeBinaryFromReader);
      msg.getFriendInfoList().push(value);
      msg.setFriendInfoList(msg.getFriendInfoList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.FriendListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.FriendListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.FriendListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.FriendListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vmr_common_pb.Error.serializeBinaryToWriter
    );
  }
  f = this.getFriendInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vmr.FriendInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.FriendListResponse} The clone.
 */
proto.vmr.FriendListResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.FriendListResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Error error = 1;
 * @return {proto.vmr.Error}
 */
proto.vmr.FriendListResponse.prototype.getError = function() {
  return /** @type{proto.vmr.Error} */ (
    jspb.Message.getWrapperField(this, vmr_common_pb.Error, 1));
};


/** @param {proto.vmr.Error|undefined} value  */
proto.vmr.FriendListResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vmr.FriendListResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.vmr.FriendListResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated FriendInfo friend_info = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vmr.FriendInfo>}
 */
proto.vmr.FriendListResponse.prototype.getFriendInfoList = function() {
  return /** @type{!Array.<!proto.vmr.FriendInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vmr.FriendInfo, 2));
};


/** @param {Array.<!proto.vmr.FriendInfo>} value  */
proto.vmr.FriendListResponse.prototype.setFriendInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.vmr.FriendListResponse.prototype.clearFriendInfoList = function() {
  this.setFriendInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.FriendInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vmr.FriendInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.FriendInfo.displayName = 'proto.vmr.FriendInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.FriendInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.FriendInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.FriendInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.FriendInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    username: msg.getUsername(),
    name: msg.getName(),
    online: msg.getOnline(),
    lastMessage: msg.getLastMessage(),
    lastMessageType: msg.getLastMessageType(),
    lastMessageSender: msg.getLastMessageSender(),
    lastMessageTimestamp: msg.getLastMessageTimestamp(),
    numUnreadMessage: msg.getNumUnreadMessage(),
    friendStatus: msg.getFriendStatus()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.FriendInfo}
 */
proto.vmr.FriendInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.FriendInfo;
  return proto.vmr.FriendInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.FriendInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.FriendInfo}
 */
proto.vmr.FriendInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastMessage(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastMessageType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastMessageSender(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastMessageTimestamp(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumUnreadMessage(value);
      break;
    case 10:
      var value = /** @type {!proto.vmr.FriendStatus} */ (reader.readEnum());
      msg.setFriendStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.FriendInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.FriendInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.FriendInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.FriendInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getOnline();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getLastMessage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getLastMessageType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getLastMessageSender();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = this.getLastMessageTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = this.getNumUnreadMessage();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = this.getFriendStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.FriendInfo} The clone.
 */
proto.vmr.FriendInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.FriendInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.vmr.FriendInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.vmr.FriendInfo.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.vmr.FriendInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.vmr.FriendInfo.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.vmr.FriendInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.vmr.FriendInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool online = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vmr.FriendInfo.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.vmr.FriendInfo.prototype.setOnline = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string last_message = 5;
 * @return {string}
 */
proto.vmr.FriendInfo.prototype.getLastMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.vmr.FriendInfo.prototype.setLastMessage = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string last_message_type = 6;
 * @return {string}
 */
proto.vmr.FriendInfo.prototype.getLastMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.vmr.FriendInfo.prototype.setLastMessageType = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 last_message_sender = 7;
 * @return {number}
 */
proto.vmr.FriendInfo.prototype.getLastMessageSender = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.vmr.FriendInfo.prototype.setLastMessageSender = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 last_message_timestamp = 8;
 * @return {number}
 */
proto.vmr.FriendInfo.prototype.getLastMessageTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.vmr.FriendInfo.prototype.setLastMessageTimestamp = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 num_unread_message = 9;
 * @return {number}
 */
proto.vmr.FriendInfo.prototype.getNumUnreadMessage = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.vmr.FriendInfo.prototype.setNumUnreadMessage = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional FriendStatus friend_status = 10;
 * @return {!proto.vmr.FriendStatus}
 */
proto.vmr.FriendInfo.prototype.getFriendStatus = function() {
  return /** @type {!proto.vmr.FriendStatus} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {!proto.vmr.FriendStatus} value  */
proto.vmr.FriendInfo.prototype.setFriendStatus = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.UserListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vmr.UserListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.UserListRequest.displayName = 'proto.vmr.UserListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.UserListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.UserListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.UserListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.UserListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    queryString: msg.getQueryString()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.UserListRequest}
 */
proto.vmr.UserListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.UserListRequest;
  return proto.vmr.UserListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.UserListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.UserListRequest}
 */
proto.vmr.UserListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.UserListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.UserListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.UserListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.UserListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQueryString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.UserListRequest} The clone.
 */
proto.vmr.UserListRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.UserListRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string query_string = 1;
 * @return {string}
 */
proto.vmr.UserListRequest.prototype.getQueryString = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.vmr.UserListRequest.prototype.setQueryString = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.UserListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vmr.UserListResponse.repeatedFields_, null);
};
goog.inherits(proto.vmr.UserListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.UserListResponse.displayName = 'proto.vmr.UserListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vmr.UserListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.UserListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.UserListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.UserListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.UserListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vmr_common_pb.Error.toObject(includeInstance, f),
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.vmr.UserResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.UserListResponse}
 */
proto.vmr.UserListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.UserListResponse;
  return proto.vmr.UserListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.UserListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.UserListResponse}
 */
proto.vmr.UserListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vmr_common_pb.Error;
      reader.readMessage(value,vmr_common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.vmr.UserResponse;
      reader.readMessage(value,proto.vmr.UserResponse.deserializeBinaryFromReader);
      msg.getUserList().push(value);
      msg.setUserList(msg.getUserList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.UserListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.UserListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.UserListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.UserListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vmr_common_pb.Error.serializeBinaryToWriter
    );
  }
  f = this.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vmr.UserResponse.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.UserListResponse} The clone.
 */
proto.vmr.UserListResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.UserListResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Error error = 1;
 * @return {proto.vmr.Error}
 */
proto.vmr.UserListResponse.prototype.getError = function() {
  return /** @type{proto.vmr.Error} */ (
    jspb.Message.getWrapperField(this, vmr_common_pb.Error, 1));
};


/** @param {proto.vmr.Error|undefined} value  */
proto.vmr.UserListResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vmr.UserListResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.vmr.UserListResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UserResponse user = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vmr.UserResponse>}
 */
proto.vmr.UserListResponse.prototype.getUserList = function() {
  return /** @type{!Array.<!proto.vmr.UserResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vmr.UserResponse, 2));
};


/** @param {Array.<!proto.vmr.UserResponse>} value  */
proto.vmr.UserListResponse.prototype.setUserList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.vmr.UserListResponse.prototype.clearUserList = function() {
  this.setUserList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.UserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vmr.UserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.UserResponse.displayName = 'proto.vmr.UserResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.UserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.UserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.UserResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.UserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    username: msg.getUsername(),
    name: msg.getName(),
    friendStatus: msg.getFriendStatus()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.UserResponse}
 */
proto.vmr.UserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.UserResponse;
  return proto.vmr.UserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.UserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.UserResponse}
 */
proto.vmr.UserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!proto.vmr.FriendStatus} */ (reader.readEnum());
      msg.setFriendStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.UserResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.UserResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.UserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.UserResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getFriendStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.UserResponse} The clone.
 */
proto.vmr.UserResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.UserResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.vmr.UserResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.vmr.UserResponse.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.vmr.UserResponse.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.vmr.UserResponse.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.vmr.UserResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.vmr.UserResponse.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional FriendStatus friend_status = 4;
 * @return {!proto.vmr.FriendStatus}
 */
proto.vmr.UserResponse.prototype.getFriendStatus = function() {
  return /** @type {!proto.vmr.FriendStatus} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {!proto.vmr.FriendStatus} value  */
proto.vmr.UserResponse.prototype.setFriendStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.ClearUnreadMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vmr.ClearUnreadMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.ClearUnreadMessageRequest.displayName = 'proto.vmr.ClearUnreadMessageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.ClearUnreadMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.ClearUnreadMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.ClearUnreadMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.ClearUnreadMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    friendId: msg.getFriendId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.ClearUnreadMessageRequest}
 */
proto.vmr.ClearUnreadMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.ClearUnreadMessageRequest;
  return proto.vmr.ClearUnreadMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.ClearUnreadMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.ClearUnreadMessageRequest}
 */
proto.vmr.ClearUnreadMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFriendId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.ClearUnreadMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.ClearUnreadMessageRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.ClearUnreadMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.ClearUnreadMessageRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFriendId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.ClearUnreadMessageRequest} The clone.
 */
proto.vmr.ClearUnreadMessageRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.ClearUnreadMessageRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 friend_id = 1;
 * @return {number}
 */
proto.vmr.ClearUnreadMessageRequest.prototype.getFriendId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.vmr.ClearUnreadMessageRequest.prototype.setFriendId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.ClearUnreadMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vmr.ClearUnreadMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.ClearUnreadMessageResponse.displayName = 'proto.vmr.ClearUnreadMessageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.ClearUnreadMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.ClearUnreadMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.ClearUnreadMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.ClearUnreadMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vmr_common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.ClearUnreadMessageResponse}
 */
proto.vmr.ClearUnreadMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.ClearUnreadMessageResponse;
  return proto.vmr.ClearUnreadMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.ClearUnreadMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.ClearUnreadMessageResponse}
 */
proto.vmr.ClearUnreadMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vmr_common_pb.Error;
      reader.readMessage(value,vmr_common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.ClearUnreadMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.ClearUnreadMessageResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.ClearUnreadMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.ClearUnreadMessageResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vmr_common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.ClearUnreadMessageResponse} The clone.
 */
proto.vmr.ClearUnreadMessageResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.ClearUnreadMessageResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Error error = 1;
 * @return {proto.vmr.Error}
 */
proto.vmr.ClearUnreadMessageResponse.prototype.getError = function() {
  return /** @type{proto.vmr.Error} */ (
    jspb.Message.getWrapperField(this, vmr_common_pb.Error, 1));
};


/** @param {proto.vmr.Error|undefined} value  */
proto.vmr.ClearUnreadMessageResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vmr.ClearUnreadMessageResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.vmr.ClearUnreadMessageResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.SetFriendStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vmr.SetFriendStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.SetFriendStatusRequest.displayName = 'proto.vmr.SetFriendStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.SetFriendStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.SetFriendStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.SetFriendStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.SetFriendStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: msg.getType(),
    friendId: msg.getFriendId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.SetFriendStatusRequest}
 */
proto.vmr.SetFriendStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.SetFriendStatusRequest;
  return proto.vmr.SetFriendStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.SetFriendStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.SetFriendStatusRequest}
 */
proto.vmr.SetFriendStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vmr.SetFriendStatusRequest.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFriendId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.SetFriendStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.SetFriendStatusRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.SetFriendStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.SetFriendStatusRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getFriendId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.SetFriendStatusRequest} The clone.
 */
proto.vmr.SetFriendStatusRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.SetFriendStatusRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Type type = 1;
 * @return {!proto.vmr.SetFriendStatusRequest.Type}
 */
proto.vmr.SetFriendStatusRequest.prototype.getType = function() {
  return /** @type {!proto.vmr.SetFriendStatusRequest.Type} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.vmr.SetFriendStatusRequest.Type} value  */
proto.vmr.SetFriendStatusRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 friend_id = 2;
 * @return {number}
 */
proto.vmr.SetFriendStatusRequest.prototype.getFriendId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.vmr.SetFriendStatusRequest.prototype.setFriendId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.vmr.SetFriendStatusRequest.Type = {
  ADD_FRIEND: 0,
  ACCEPT_FRIEND: 1,
  REJECT_FRIEND: 2,
  REMOVE_FRIEND: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vmr.SetFriendStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vmr.SetFriendStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vmr.SetFriendStatusResponse.displayName = 'proto.vmr.SetFriendStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vmr.SetFriendStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vmr.SetFriendStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vmr.SetFriendStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vmr.SetFriendStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vmr_common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vmr.SetFriendStatusResponse}
 */
proto.vmr.SetFriendStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vmr.SetFriendStatusResponse;
  return proto.vmr.SetFriendStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vmr.SetFriendStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vmr.SetFriendStatusResponse}
 */
proto.vmr.SetFriendStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vmr_common_pb.Error;
      reader.readMessage(value,vmr_common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vmr.SetFriendStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.SetFriendStatusResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vmr.SetFriendStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vmr.SetFriendStatusResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vmr_common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vmr.SetFriendStatusResponse} The clone.
 */
proto.vmr.SetFriendStatusResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.vmr.SetFriendStatusResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Error error = 1;
 * @return {proto.vmr.Error}
 */
proto.vmr.SetFriendStatusResponse.prototype.getError = function() {
  return /** @type{proto.vmr.Error} */ (
    jspb.Message.getWrapperField(this, vmr_common_pb.Error, 1));
};


/** @param {proto.vmr.Error|undefined} value  */
proto.vmr.SetFriendStatusResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vmr.SetFriendStatusResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.vmr.SetFriendStatusResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.vmr.FriendStatus = {
  FRIEND: 0,
  WAITING: 1,
  NOT_ANSWER: 2,
  NOTHING: 3,
  REMOVED: 4
};

goog.object.extend(exports, proto.vmr);
